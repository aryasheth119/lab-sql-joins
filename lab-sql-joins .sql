USE sakila;

SELECT * FROM category;

SELECT category_id, COUNT(*) AS number_of_films
FROM sakila.category
GROUP BY category_id;

-- Retrieve the store ID, city, and country for each store
/*
"store" 
  - store_id -
  - manager_staff_id
  - address_id -------------------------------|
  - last_update                               |
"country"                                     |
   - country_id.  ----|                       |
   - country -        |                       |-- (address_id, store_id)  --|
   - last_update.     |                       |                             |---(city, country, store_id)
"city"                | --- (city, country) --|-----------------------------|
   - city_id.         |                       |
   - city -           |                       |
   - country_id ------|                       |
   - last_update                              |
 "address"                                    |
   - address_id ------------------------------|
   - address
   - address2
   - district
   - city_id
   - postal_code
   - phone
   - location
   - last_update
*/

-- Join tables city, country
SELECT * FROM sakila.country as co
JOIN sakila.city as ci
ON co.country_id = ci.country_id;

-- Join talbles address, store
SELECT * FROM sakila.store as s
JOIN sakila.address as a 
ON s.address_id = a.address_id;

-- Final join
SELECT * FROM sakila.store as s
JOIN sakila.address as a 
ON s.address_id = a.address_id
JOIN sakila.city as ci
ON a.city_id = ci.city_id
JOIN sakila.country as co
ON ci.country_id = co.country_id;

-- JOIN sakila.store as s
-- ON s.address_id = a.address_id
-- JOIN sakila.city as ci
-- ON a.city_id = ci.city_id
-- JOIN sakila.country as co
-- ON ci.country_id = co.country_id
-- WHERE (s.type = "Store_id") AND (co.type = "Country") AND (ci.type = city);

-- Calculate the total revenue generated by each store in dollars

SELECT * FROM sakila.payment;

SELECT SUM(amount) FROM sakila.payment;

-- Determine the average running time of films for each category and Identify the film categories with the longest average running time.

SELECT * FROM sakila.category;

SELECT * FROM sakila.film as f
JOIN sakila.film_category as fc
ON f.film_id = fc.film_id;

SELECT * FROM sakila.category as c
JOIN sakila.film_category as fc
ON c.category_id = fc.category_id;

SELECT * FROM sakila.film as f
JOIN sakila.film_category as fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON c.category_id = fc.category_id;

SELECT c.name AS category_name, AVG(f.length) AS average_running_time
FROM sakila.category AS c
JOIN sakila.film_category AS fc ON c.category_id = fc.category_id
JOIN sakila.film AS f ON f.film_id = fc.film_id
GROUP BY c.name
ORDER BY average_running_time DESC
LIMIT 10;

SELECT AVG(length) FROM sakila.film;

-- Display the top 10 most frequently rented movies in descending order.

SELECT title, rental_rate FROM sakila.film
ORDER BY rental_rate DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT * FROM sakila.store;

SELECT * FROM sakila.film as f
JOIN sakila.inventory as i
ON f.film_id = i.film_id;

SELECT * FROM sakila.store as s
JOIN sakila.inventory as i
ON s.store_id = i.store_id;

SELECT * FROM sakila.store as s
JOIN sakila.inventory as i
ON s.store_id = i.store_id
JOIN sakila.film as f
ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;



